trigger:
- master
pool:
 name: winbayeragentpool
 demands:
 - msbuild
 - visualstudio
 - vstest
 - java
variables:
 solution: 'HappyCode.NetCoreBoilerplate.sln'
 buildPlatform: 'Any CPU'
 buildConfiguration: 'Release'
  
stages:
- stage: Build
    - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'SonarQube'
      scannerMode: 'MSBuild'
      projectKey: 'bayerplate'
      projectName: 'bayerplate'
    - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'config'
    - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--output $(Build.SourcesDirectory)/target/'

  - task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: 'test/HappyCode.NetCoreBoilerplate.Api.IntegrationTests/HappyCode.NetCoreBoilerplate.Api.IntegrationTests.csproj'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
  - task: SonarQubeAnalyze@4
  displayName: 'Run Code Analysis'
  - task: SonarQubePublish@4
  displayName: 'Publish Quality Gate Result'
  inputs:
    pollingTimeoutSec: '300'
  - task: sonar-buildbreaker@8
  inputs:
    SonarQube: 'SonarQube'
  - task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--output $(Build.ArtifactStagingDirectory)'
  - task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
  - task: CopyPublishBuildArtifacts@1
  inputs:
    CopyRoot: '$(Build.ArtifactStagingDirectory)'
    Contents: 'HappyCode.NetCoreBoilerplate.Api.zip'
    ArtifactName: 'Aadeshartifacts'
    ArtifactType: 'Container'
  - task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    downloadPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'Aadeshartifacts'
  - task: IISWebAppManagementOnMachineGroup@0
  inputs:
    EnableIIS: true
    IISDeploymentType: 'IISWebsite'
    ActionIISWebsite: 'CreateOrUpdateWebsite'
    WebsiteName: 'bayarnet'
    WebsitePhysicalPath: '%SystemDrive%\inetpub\wwwroot'
    WebsitePhysicalPathAuth: 'WebsiteWindowsAuth'
    WebsiteAuthUserName: 'devopsadmin'
    WebsiteAuthUserPassword: 'Aprilmay@2020'
    CreateOrUpdateAppPoolForWebsite: true
    AppPoolNameForWebsite: 'bayerplateapplicationpool'
    DotNetVersionForWebsite: 'v4.0'
    PipeLineModeForWebsite: 'Integrated'
    AppPoolIdentityForWebsite: 'ApplicationPoolIdentity'
  
 - stage: DeployStaging
  displayName: 'Deploy to staging'
  dependsOn: 'Build'
  condition: succeeded()
  jobs:
  - deployment: DeployWeb
    displayName: Deploy Test API
    pool:
    vmImage: 'windows-latest'
    environment:
      name: test-stg
      resourceType: VirtualMachine
      tags: web
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              path: '$(System.ArtifactsDirectory)'
              artifactName: 'drop'

          - task: IISWebAppManagementOnMachineGroup@0
            displayName: 'IIS Web App Manage'
            inputs:
              IISDeploymentType: 'IISWebsite'
              ActionIISWebsite: 'CreateOrUpdateWebsite'
              WebsiteName: 'TestCloudTestDemo'
              websitePhysicalPath: '%SystemDrive%\inetpub\wwwroot'
              websitePhysicalPathAuth: 'WebsiteUserPassThrough'
              AddBinding: true
              protocol: 'http'
              iPAddress: 'All Unassigned'
              port: '85'
              Bindings:
              CreateOrUpdateAppPoolForWebsite: true
              AppPoolNameForWebsite: 'TestCloudTestDemo'
              ParentWebsiteNameForVD: '$(Parameters.WebsiteName)'
              virtualPathForVD:
              physicalPathForVD: '%SystemDrive%\inetpub\wwwroot'
              ParentWebsiteNameForApplication: '$(Parameters.WebsiteName)'
              VirtualPathForApplication: '$(Parameters.VirtualPathForApplication)'
              AppPoolName: '$(Parameters.AppPoolName)'
              appPoolNameForApplication:
              dotNetVersionForApplication: 'v4.0'
              pipeLineModeForApplication: 'Integrated'
              appPoolIdentityForApplication: 'ApplicationPoolIdentity'

          - task: IISWebAppDeploymentOnMachineGroup@0
            displayName: 'IIS Web App Deploy'
            inputs:
              WebSiteName: 'TestCloudTestDemo'
              package: '$(System.ArtifactsDirectory)\**\*.zip'
              XmlVariableSubstitution: True
